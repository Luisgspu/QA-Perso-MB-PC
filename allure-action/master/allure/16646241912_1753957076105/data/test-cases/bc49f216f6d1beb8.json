{"uid":"bc49f216f6d1beb8","name":"test_run[test_case5]","fullName":"QAAppAllure#test_run","historyId":"1cbe639eda293dd42457b995ac95f108","time":{"start":1753957047899,"stop":1753957070259,"duration":22360},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed due to image verification error.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'AT/de', 'model_code': 'H247-fl', 'model_name': 'GLA', ...}\nscreenshot_dir = '/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            with allure.step(f\"\uD83C\uDF10 Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:175: in run_test\n    test_success = verify_personalization_and_capture(\nApp/VerifyPersonalizationAndCapture.py:141: in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App.ImageVerifier.ImageVerifier object at 0x7f323cac65d0>\nselector = \"[data-component-name='hp-campaigns'] img\"\nexpected_path = '/images/dynamic/europe/', test_name = 'Last Seen SRP'\ntimeout = 6\n\n    def verify_image(self, selector: str, expected_path: str, test_name: str = None, timeout: int = 6) -> bool:\n        \"\"\"\n        Verifies if an image with the expected `src` is present among all images matching the selector.\n        \"\"\"\n        try:\n            # Wait for at least one image to be present\n            WebDriverWait(self.driver, timeout).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, selector))\n            )\n            images = self.driver.find_elements(By.CSS_SELECTOR, selector)\n            img_count = len(images)\n            logging.info(f\"Found {img_count} <img> elements inside {selector}.\")\n    \n            srcs = []\n            found_match = False\n            for i, img in enumerate(images):\n                src = img.get_attribute(\"src\")\n                srcs.append(src)\n                logging.info(f\"Image {i+1} src: {src}\")\n                if src and expected_path in src:\n                    found_match = True\n    \n            logging.info(\"All found image srcs:\\n\" + \"\\n\".join([str(s) for s in srcs]))\n            # Attach all found image srcs to Allure\n            allure.attach(\n                \"\\n\".join([str(s) for s in srcs]),\n                name=\"All Found Image Sources\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            if found_match:\n                # Find all matching srcs\n                matching_srcs = [src for src in srcs if src and expected_path in src]\n                # Attach all matching image srcs to Allure\n                allure.attach(\n                    \"\\n\".join([str(s) for s in matching_srcs]),\n                    name=\"Matching Image Sources\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                with allure.step(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\"):\n                    logging.info(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\")\n                    return True\n            else:\n                with allure.step(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\"):\n                    logging.warning(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\")\n                    message = f\"❌ Test '{test_name}' failed due to image verification error.\"\n>                   pytest.fail(message)\nE                   Failed: ❌ Test 'Last Seen SRP' failed due to image verification error.\n\nApp/ImageVerifier.py:58: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":4,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1753957047898,"stop":1753957047898,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed due to image verification error.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'AT/de', 'model_code': 'H247-fl', 'model_name': 'GLA', ...}\nscreenshot_dir = '/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            with allure.step(f\"\uD83C\uDF10 Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:175: in run_test\n    test_success = verify_personalization_and_capture(\nApp/VerifyPersonalizationAndCapture.py:141: in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App.ImageVerifier.ImageVerifier object at 0x7f323cac65d0>\nselector = \"[data-component-name='hp-campaigns'] img\"\nexpected_path = '/images/dynamic/europe/', test_name = 'Last Seen SRP'\ntimeout = 6\n\n    def verify_image(self, selector: str, expected_path: str, test_name: str = None, timeout: int = 6) -> bool:\n        \"\"\"\n        Verifies if an image with the expected `src` is present among all images matching the selector.\n        \"\"\"\n        try:\n            # Wait for at least one image to be present\n            WebDriverWait(self.driver, timeout).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, selector))\n            )\n            images = self.driver.find_elements(By.CSS_SELECTOR, selector)\n            img_count = len(images)\n            logging.info(f\"Found {img_count} <img> elements inside {selector}.\")\n    \n            srcs = []\n            found_match = False\n            for i, img in enumerate(images):\n                src = img.get_attribute(\"src\")\n                srcs.append(src)\n                logging.info(f\"Image {i+1} src: {src}\")\n                if src and expected_path in src:\n                    found_match = True\n    \n            logging.info(\"All found image srcs:\\n\" + \"\\n\".join([str(s) for s in srcs]))\n            # Attach all found image srcs to Allure\n            allure.attach(\n                \"\\n\".join([str(s) for s in srcs]),\n                name=\"All Found Image Sources\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            if found_match:\n                # Find all matching srcs\n                matching_srcs = [src for src in srcs if src and expected_path in src]\n                # Attach all matching image srcs to Allure\n                allure.attach(\n                    \"\\n\".join([str(s) for s in matching_srcs]),\n                    name=\"Matching Image Sources\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                with allure.step(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\"):\n                    logging.info(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\")\n                    return True\n            else:\n                with allure.step(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\"):\n                    logging.warning(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\")\n                    message = f\"❌ Test '{test_name}' failed due to image verification error.\"\n>                   pytest.fail(message)\nE                   Failed: ❌ Test 'Last Seen SRP' failed due to image verification error.\n\nApp/ImageVerifier.py:58: Failed","steps":[{"name":"\uD83C\uDF10 Fetched URLs for GLA (SUV)","time":{"start":1753957048241,"stop":1753957048241,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"70e49b6d2a0c1879","name":"URLs for GLA (SUV)","source":"70e49b6d2a0c1879.json","type":"application/json","size":757}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Setting up stealth mode for the browser","time":{"start":1753957048241,"stop":1753957048270,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1753957048270,"stop":1753957048272,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.at/?usecaselivetest=true","time":{"start":1753957048272,"stop":1753957050447,"duration":2175},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Detecting and accepting cookies","time":{"start":1753957050447,"stop":1753957052669,"duration":2222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform Last Seen SRP Logic","time":{"start":1753957052670,"stop":1753957067198,"duration":14528},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.at/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/bodyType-SUV_OFFROADER/modelIdentifier-GLA/sortType-price-asc/","time":{"start":1753957052670,"stop":1753957058709,"duration":6039},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.at/?usecaselivetest=true","time":{"start":1753957062709,"stop":1753957067198,"duration":4489},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":2,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1753957067198,"stop":1753957067587,"duration":389},"status":"passed","steps":[{"name":"Setting campaign name substring for test: Last Seen SRP","time":{"start":1753957067198,"stop":1753957067198,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"1a80744aa5d97965","name":"Info","source":"1a80744aa5d97965.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1753957067198,"stop":1753957067578,"duration":380},"status":"passed","steps":[],"attachments":[{"uid":"39bee3e04835aeba","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_austria_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZGVfQVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmF0Lz91c2VjYXNlbGl2ZXRlc3Q9dHJ1ZSIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNzgifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjE1MTM3MzM4MS4xNzUzOTU3MDU2In0sImFub25JZCI6ImU4YzM4ZWMxZjc0ZDZkOTkifSwicGVyZm9ybWFuY2UiOnt9LCJkZWJ1ZyI6eyJleHBsYW5hdGlvbnMiOnRydWV9LCJjYXRhbG9nIjp7fSwiY29uc2VudHMiOltdLCJhY2NvdW50Ijp7fSwiX3Rvb2xzRXZlbnRMaW5rSWQiOiI3NzgwNDQ0NDIzMDA4NTA3In0%3D","source":"39bee3e04835aeba.json","type":"application/json","size":3232}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Campaign 'dcp-last-seen-pdp-srp | all available models | home | simple-teaser' has userGroup: Default and experienceName: Experience 1.","time":{"start":1753957067587,"stop":1753957067587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":3,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1753957067587,"stop":1753957070193,"duration":2606},"status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed due to image verification error.\n","statusTrace":"  File \"/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/App/VerifyPersonalizationAndCapture.py\", line 141, in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n        selector=selector + \" img\",\n    ...<2 lines>...\n        timeout=6\n    )\n  File \"/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/App/ImageVerifier.py\", line 58, in verify_image\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-XK8kbuqg-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"⏳ Waiting for images inside the campaign section to load...","time":{"start":1753957067587,"stop":1753957067591,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83D\uDCDC Scrolling to the element...","time":{"start":1753957067591,"stop":1753957067704,"duration":113},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1753957068705,"stop":1753957069768,"duration":1063},"status":"passed","steps":[],"attachments":[{"uid":"e0e00fa780b8e99b","name":"Scroll Info","source":"e0e00fa780b8e99b.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Screenshot captured and saved","time":{"start":1753957070155,"stop":1753957070156,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"6e5fb81bbed4351d","name":"Final Screenshot","source":"6e5fb81bbed4351d.png","type":"image/png","size":1686503}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"❌ Image not found in the specified selector. Expected src: /images/dynamic/europe/","time":{"start":1753957070192,"stop":1753957070192,"duration":0},"status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed due to image verification error.\n","statusTrace":"  File \"/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/App/ImageVerifier.py\", line 58, in verify_image\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-XK8kbuqg-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"dde3a68c5f8ed7a7","name":"All Found Image Sources","source":"dde3a68c5f8ed7a7.txt","type":"text/plain","size":1070}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"stepsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8d816bea9bd80a13","name":"log","source":"8d816bea9bd80a13.txt","type":"text/plain","size":37744}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":7,"stepsCount":18,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"0132e8787dc8fbea40ae1ab573294fc2"},{"name":"parentSuite","value":"AT/de"},{"name":"suite","value":"Last Seen SRP"},{"name":"subSuite","value":"H247-fl - GLA (SUV)"},{"name":"tag","value":"Last Seen SRP"},{"name":"tag","value":"AT/de"},{"name":"tag","value":"H247-fl"},{"name":"tag","value":"SUV"},{"name":"tag","value":"GLA"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2544-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Seen SRP', 'market_code': 'AT/de', 'model_code': 'H247-fl', 'urls': {'MODEL_CODE': 'H247-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/suv/gla/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/GLA-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.at/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/bodyType-SUV_OFFROADER/modelIdentifier-GLA/sortType-price-asc/', 'TEST_DRIVE': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=H247-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.at/?usecaselivetest=true', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLA'}, 'model_name': 'GLA', 'body_type': 'SUV'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3601fdd0f05fed2a","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed because the campaign was identified as part of the Control Group.","time":{"start":1753957028473,"stop":1753957047883,"duration":19410}},{"uid":"4cade703dd19930f","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed because the campaign was identified as part of the Control Group.","time":{"start":1753957009084,"stop":1753957028457,"duration":19373}},{"uid":"b42773d6d6702016","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed because the campaign was identified as part of the Control Group.","time":{"start":1753956989727,"stop":1753957009069,"duration":19342}},{"uid":"fe906e870b05b8f1","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed due to image verification error.","time":{"start":1753956961292,"stop":1753956989692,"duration":28400}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["Last Seen SRP","SUV","AT/de","GLA","H247-fl"]},"source":"bc49f216f6d1beb8.json","parameterValues":["{'test_name': 'Last Seen SRP', 'market_code': 'AT/de', 'model_code': 'H247-fl', 'urls': {'MODEL_CODE': 'H247-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/suv/gla/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/GLA-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.at/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/bodyType-SUV_OFFROADER/modelIdentifier-GLA/sortType-price-asc/', 'TEST_DRIVE': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=H247-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.at/?usecaselivetest=true', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLA'}, 'model_name': 'GLA', 'body_type': 'SUV'}"]}