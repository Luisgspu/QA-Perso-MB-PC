{"uid":"64df6dbc14b2a56c","name":"test_run[test_case1]","fullName":"QAAppAllure#test_run","historyId":"eed755d347b011a9f0b202eb061d779d","time":{"start":1753269569368,"stop":1753269591641,"duration":22273},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV1' failed due to image verification error.","statusTrace":"test_case = {'body_type': 'COUPE', 'market_code': 'IT/it', 'model_code': 'C118-fl', 'model_name': 'CLA', ...}\nscreenshot_dir = '/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            with allure.step(f\"\uD83C\uDF10 Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:325: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:175: in run_test\n    test_success = verify_personalization_and_capture(\nApp/VerifyPersonalizationAndCapture.py:141: in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App.ImageVerifier.ImageVerifier object at 0x7fd07121b9d0>\nselector = \"[data-component-name='hp-campaigns'] img\"\nexpected_path = '/content/dam/hq/personalization/campaignmodule/'\ntest_name = 'BFV1', timeout = 6\n\n    def verify_image(self, selector: str, expected_path: str, test_name: str = None, timeout: int = 6) -> bool:\n        \"\"\"\n        Verifies if an image with the expected `src` is present among all images matching the selector.\n        \"\"\"\n        try:\n            # Wait for at least one image to be present\n            WebDriverWait(self.driver, timeout).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, selector))\n            )\n            images = self.driver.find_elements(By.CSS_SELECTOR, selector)\n            img_count = len(images)\n            logging.info(f\"Found {img_count} <img> elements inside {selector}.\")\n    \n            srcs = []\n            found_match = False\n            for i, img in enumerate(images):\n                src = img.get_attribute(\"src\")\n                srcs.append(src)\n                logging.info(f\"Image {i+1} src: {src}\")\n                if src and expected_path in src:\n                    found_match = True\n    \n            logging.info(\"All found image srcs:\\n\" + \"\\n\".join([str(s) for s in srcs]))\n            # Attach all found image srcs to Allure\n            allure.attach(\n                \"\\n\".join([str(s) for s in srcs]),\n                name=\"All Found Image Sources\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            if found_match:\n                # Find all matching srcs\n                matching_srcs = [src for src in srcs if src and expected_path in src]\n                # Attach all matching image srcs to Allure\n                allure.attach(\n                    \"\\n\".join([str(s) for s in matching_srcs]),\n                    name=\"Matching Image Sources\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                with allure.step(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\"):\n                    logging.info(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\")\n                    return True\n            else:\n                with allure.step(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\"):\n                    logging.warning(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\")\n                    message = f\"❌ Test '{test_name}' failed due to image verification error.\"\n>                   pytest.fail(message)\nE                   Failed: ❌ Test 'BFV1' failed due to image verification error.\n\nApp/ImageVerifier.py:58: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1753269569368,"stop":1753269569368,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV1' failed due to image verification error.","statusTrace":"test_case = {'body_type': 'COUPE', 'market_code': 'IT/it', 'model_code': 'C118-fl', 'model_name': 'CLA', ...}\nscreenshot_dir = '/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            with allure.step(f\"\uD83C\uDF10 Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:325: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:175: in run_test\n    test_success = verify_personalization_and_capture(\nApp/VerifyPersonalizationAndCapture.py:141: in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App.ImageVerifier.ImageVerifier object at 0x7fd07121b9d0>\nselector = \"[data-component-name='hp-campaigns'] img\"\nexpected_path = '/content/dam/hq/personalization/campaignmodule/'\ntest_name = 'BFV1', timeout = 6\n\n    def verify_image(self, selector: str, expected_path: str, test_name: str = None, timeout: int = 6) -> bool:\n        \"\"\"\n        Verifies if an image with the expected `src` is present among all images matching the selector.\n        \"\"\"\n        try:\n            # Wait for at least one image to be present\n            WebDriverWait(self.driver, timeout).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, selector))\n            )\n            images = self.driver.find_elements(By.CSS_SELECTOR, selector)\n            img_count = len(images)\n            logging.info(f\"Found {img_count} <img> elements inside {selector}.\")\n    \n            srcs = []\n            found_match = False\n            for i, img in enumerate(images):\n                src = img.get_attribute(\"src\")\n                srcs.append(src)\n                logging.info(f\"Image {i+1} src: {src}\")\n                if src and expected_path in src:\n                    found_match = True\n    \n            logging.info(\"All found image srcs:\\n\" + \"\\n\".join([str(s) for s in srcs]))\n            # Attach all found image srcs to Allure\n            allure.attach(\n                \"\\n\".join([str(s) for s in srcs]),\n                name=\"All Found Image Sources\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            if found_match:\n                # Find all matching srcs\n                matching_srcs = [src for src in srcs if src and expected_path in src]\n                # Attach all matching image srcs to Allure\n                allure.attach(\n                    \"\\n\".join([str(s) for s in matching_srcs]),\n                    name=\"Matching Image Sources\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                with allure.step(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\"):\n                    logging.info(f\"✅ Personalized image with expected src '{expected_path}' was applied correctly.\")\n                    return True\n            else:\n                with allure.step(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\"):\n                    logging.warning(f\"❌ Image not found in the specified selector. Expected src: {expected_path}\")\n                    message = f\"❌ Test '{test_name}' failed due to image verification error.\"\n>                   pytest.fail(message)\nE                   Failed: ❌ Test 'BFV1' failed due to image verification error.\n\nApp/ImageVerifier.py:58: Failed","steps":[{"name":"\uD83C\uDF10 Fetched URLs for CLA (COUPE)","time":{"start":1753269569724,"stop":1753269569725,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c6c0b3666a351eec","name":"URLs for CLA (COUPE)","source":"c6c0b3666a351eec.json","type":"application/json","size":748}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Setting up stealth mode for the browser","time":{"start":1753269569725,"stop":1753269569755,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Enabling network logging","time":{"start":1753269569755,"stop":1753269569757,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.it/?usecaselivetest=true","time":{"start":1753269569757,"stop":1753269573639,"duration":3882},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"✅ Detecting and accepting cookies","time":{"start":1753269573639,"stop":1753269576206,"duration":2567},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Perform BFV1 Test Logic","time":{"start":1753269576206,"stop":1753269588259,"duration":12053},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigating to: https://www.mercedes-benz.it/passengercars/models/coupe/cla/overview.html","time":{"start":1753269576206,"stop":1753269582817,"duration":6611},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"\uD83C\uDF0D Navigating back to: https://www.mercedes-benz.it/?usecaselivetest=true","time":{"start":1753269582817,"stop":1753269588259,"duration":5442},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1753269588259,"stop":1753269589009,"duration":750},"status":"passed","steps":[{"name":"Setting campaign name substring for test: BFV1","time":{"start":1753269588259,"stop":1753269588259,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"310a1e0044fd81fd","name":"Info","source":"310a1e0044fd81fd.txt","type":"text/plain","size":52}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Capturing XHR responses","time":{"start":1753269588259,"stop":1753269588997,"duration":738},"status":"passed","steps":[],"attachments":[{"uid":"8026c59ec03b8066","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_italy_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiaXRfSVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56Lml0Lz91c2VjYXNlbGl2ZXRlc3Q9dHJ1ZSIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNjgifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjEyMTc1ODY3MjAuMTc1MzI2OTU3OCJ9LCJhbm9uSWQiOiIzZTY4YzIyNzMzMjVjM2IzIn0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiMDAxNjc5NjExNTY2NDUxNjg4NiJ9","source":"8026c59ec03b8066.json","type":"application/json","size":3444}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"✅ Campaign 'best-fitting-vehicle | all models | home | simple-teaser, campaign-module and stage' has userGroup: Default and experienceName: Target .","time":{"start":1753269589009,"stop":1753269589009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":3,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1753269589009,"stop":1753269591571,"duration":2562},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV1' failed due to image verification error.\n","statusTrace":"  File \"/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/App/VerifyPersonalizationAndCapture.py\", line 141, in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n        selector=selector + \" img\",\n    ...<2 lines>...\n        timeout=6\n    )\n  File \"/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/App/ImageVerifier.py\", line 58, in verify_image\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-XK8kbuqg-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"⏳ Waiting for images inside the campaign section to load...","time":{"start":1753269589009,"stop":1753269589014,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"\uD83D\uDCDC Scrolling to the element...","time":{"start":1753269589014,"stop":1753269589031,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1753269590032,"stop":1753269591073,"duration":1041},"status":"passed","steps":[],"attachments":[{"uid":"536a23cde0dfbfd5","name":"Scroll Info","source":"536a23cde0dfbfd5.txt","type":"text/plain","size":53}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"✅ Screenshot captured and saved","time":{"start":1753269591527,"stop":1753269591528,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"d0edcff510c7f6cc","name":"Final Screenshot","source":"d0edcff510c7f6cc.png","type":"image/png","size":1517433}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"❌ Image not found in the specified selector. Expected src: /content/dam/hq/personalization/campaignmodule/","time":{"start":1753269591571,"stop":1753269591571,"duration":0},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV1' failed due to image verification error.\n","statusTrace":"  File \"/home/runner/work/QA-Perso-MB-PC/QA-Perso-MB-PC/App/ImageVerifier.py\", line 58, in verify_image\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-XK8kbuqg-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"6d1f82c7e51ba782","name":"All Found Image Sources","source":"6d1f82c7e51ba782.txt","type":"text/plain","size":1257}],"parameters":[],"attachmentStep":false,"stepsCount":5,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":3}],"attachments":[{"uid":"e9c8d74bf9cc4c20","name":"log","source":"e9c8d74bf9cc4c20.txt","type":"text/plain","size":10495}],"parameters":[],"attachmentStep":false,"stepsCount":18,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":7},"afterStages":[],"labels":[{"name":"as_id","value":"034affab61481453ec9f744979db9744"},{"name":"parentSuite","value":"IT/it"},{"name":"suite","value":"BFV1"},{"name":"subSuite","value":"C118-fl - CLA (COUPE)"},{"name":"tag","value":"BFV1"},{"name":"tag","value":"IT/it"},{"name":"tag","value":"C118-fl"},{"name":"tag","value":"COUPE"},{"name":"tag","value":"CLA"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"2397-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV1', 'market_code': 'IT/it', 'model_code': 'C118-fl', 'urls': {'MODEL_CODE': 'C118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/coupe/cla/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLA/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/bodyType-COUPE/modelIdentifier-CLA_CLASS/sortType-price-asc/', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/?usecaselivetest=true', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLA'}, 'model_name': 'CLA', 'body_type': 'COUPE'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["BFV1","IT/it","C118-fl","CLA","COUPE"]},"source":"64df6dbc14b2a56c.json","parameterValues":["{'test_name': 'BFV1', 'market_code': 'IT/it', 'model_code': 'C118-fl', 'urls': {'MODEL_CODE': 'C118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/coupe/cla/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLA/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/bodyType-COUPE/modelIdentifier-CLA_CLASS/sortType-price-asc/', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/?usecaselivetest=true', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLA'}, 'model_name': 'CLA', 'body_type': 'COUPE'}"]}