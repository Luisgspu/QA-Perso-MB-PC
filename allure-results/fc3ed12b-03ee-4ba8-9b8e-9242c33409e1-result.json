{"name": "test_run[test_case0]", "status": "failed", "statusDetails": {"message": "Failed: Failed to accept cookies.", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"25f30eb8c4e9cbd9b77ff320251c143c\")>\ntest_name = 'Last Configuration Completed', market_code = 'AT/de'\nmodel_code = 'C236', model_name = 'CLE', body_type = 'COUPE', attempt = 1\nurls = {'BODY_TYPE': 'COUPE', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.../AT/de/CLE-KLASSE/COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.at/?usecaselivetest=true', 'MODEL_CODE': 'C236', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x00000238B05567B0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x00000238B054CAD0>)\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        # Attach URLs to Allure\n            with allure.step(f\"🌐 Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            with allure.step(f\"🌍 Navigating to HOME_PAGE: {urls['HOME_PAGE']}\"):\n                driver.get(urls['HOME_PAGE'])\n                WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n                logging.info(f\"🌍 Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            with allure.step(\"✅ Detecting and accepting cookies\"):\n                WebDriverWait(driver, 6).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n                )\n                time.sleep(2)\n                logging.info(\"✅ Cookie banner detected.\")\n>               driver.execute_script(\"\"\"\n                    document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n                \"\"\")\n\nQAAppAllure.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nC:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000238B054C590>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Cannot read properties of ...fier [0x0x7ff7d2fac368+10728]\\\\n\\\\t(No symbol) [0x0x7ffdcd95e8d7]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdcda7c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of null (reading 'click')\nE         (Session info: chrome=137.0.7151.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7d2fbcda5+78885]\nE       \tGetHandleVerifier [0x0x7ff7d2fbce00+78976]\nE       \t(No symbol) [0x0x7ff7d2d79bca]\nE       \t(No symbol) [0x0x7ff7d2d815bd]\nE       \t(No symbol) [0x0x7ff7d2d84951]\nE       \t(No symbol) [0x0x7ff7d2e225ab]\nE       \t(No symbol) [0x0x7ff7d2df8b8a]\nE       \t(No symbol) [0x0x7ff7d2e2122f]\nE       \t(No symbol) [0x0x7ff7d2df8963]\nE       \t(No symbol) [0x0x7ff7d2dc16b1]\nE       \t(No symbol) [0x0x7ff7d2dc2443]\nE       \tGetHandleVerifier [0x0x7ff7d3294eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff7d328f33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff7d32ae592+3165202]\nE       \tGetHandleVerifier [0x0x7ff7d2fd730e+186766]\nE       \tGetHandleVerifier [0x0x7ff7d2fdeb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff7d2fc59b4+114740]\nE       \tGetHandleVerifier [0x0x7ff7d2fc5b69+115177]\nE       \tGetHandleVerifier [0x0x7ff7d2fac368+10728]\nE       \t(No symbol) [0x0x7ffdcd95e8d7]\nE       \tRtlUserThreadStart [0x0x7ffdcda7c34c+44]\n\nC:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: JavascriptException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_case = {'body_type': 'COUPE', 'market_code': 'AT/de', 'model_code': 'C236', 'model_name': 'CLE', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            with allure.step(f\"🌐 Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"25f30eb8c4e9cbd9b77ff320251c143c\")>\ntest_name = 'Last Configuration Completed', market_code = 'AT/de'\nmodel_code = 'C236', model_name = 'CLE', body_type = 'COUPE', attempt = 1\nurls = {'BODY_TYPE': 'COUPE', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.../AT/de/CLE-KLASSE/COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.at/?usecaselivetest=true', 'MODEL_CODE': 'C236', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x00000238B05567B0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x00000238B054CAD0>)\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        # Attach URLs to Allure\n            with allure.step(f\"🌐 Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            with allure.step(f\"🌍 Navigating to HOME_PAGE: {urls['HOME_PAGE']}\"):\n                driver.get(urls['HOME_PAGE'])\n                WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n                logging.info(f\"🌍 Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            with allure.step(\"✅ Detecting and accepting cookies\"):\n                WebDriverWait(driver, 6).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n                )\n                time.sleep(2)\n                logging.info(\"✅ Cookie banner detected.\")\n                driver.execute_script(\"\"\"\n                    document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n                \"\"\")\n                logging.info(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            # Attach the error to Allure\n            allure.attach(\"❌ Cookie banner not found or already accepted.\", name=\"Cookie Acceptance Error\", attachment_type=allure.attachment_type.TEXT)\n            # Add a custom defect category\n            allure.dynamic.label(\"defect\", \"Cookie Acceptance Failure\")\n            allure.dynamic.tag(\"Cookie Issue\")\n    \n            # Log the error\n            logging.error(\"❌ Failed to accept cookies.\")\n>           pytest.fail(\"Failed to accept cookies.\")\nE           Failed: Failed to accept cookies.\n\nQAAppAllure.py:166: Failed"}, "description": "\nRuns a test for each test case, either manually defined or dynamically fetched.\n", "steps": [{"name": "🌐 Fetched URLs for CLE (COUPE)", "status": "passed", "attachments": [{"name": "URLs for CLE (COUPE)", "source": "881ff923-1dc9-4a38-b3b8-a1dad6c51586-attachment.json", "type": "application/json"}], "start": 1750750559680, "stop": 1750750559687}, {"name": "Setting up stealth mode for the browser", "status": "passed", "start": 1750750559687, "stop": 1750750560165}, {"name": "Enabling network logging", "status": "passed", "start": 1750750560165, "stop": 1750750560190}, {"name": "🌍 Navigating to HOME_PAGE: https://www.mercedes-benz.at/?usecaselivetest=true", "status": "passed", "start": 1750750560190, "stop": 1750750570785}, {"name": "✅ Detecting and accepting cookies", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of null (reading 'click')\n  (Session info: chrome=137.0.7151.119)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7d2fbcda5+78885]\n\tGetHandleVerifier [0x0x7ff7d2fbce00+78976]\n\t(No symbol) [0x0x7ff7d2d79bca]\n\t(No symbol) [0x0x7ff7d2d815bd]\n\t(No symbol) [0x0x7ff7d2d84951]\n\t(No symbol) [0x0x7ff7d2e225ab]\n\t(No symbol) [0x0x7ff7d2df8b8a]\n\t(No symbol) [0x0x7ff7d2e2122f]\n\t(No symbol) [0x0x7ff7d2df8963]\n\t(No symbol) [0x0x7ff7d2dc16b1]\n\t(No symbol) [0x0x7ff7d2dc2443]\n\tGetHandleVerifier [0x0x7ff7d3294eed+3061101]\n\tGetHandleVerifier [0x0x7ff7d328f33d+3037629]\n\tGetHandleVerifier [0x0x7ff7d32ae592+3165202]\n\tGetHandleVerifier [0x0x7ff7d2fd730e+186766]\n\tGetHandleVerifier [0x0x7ff7d2fdeb3f+217535]\n\tGetHandleVerifier [0x0x7ff7d2fc59b4+114740]\n\tGetHandleVerifier [0x0x7ff7d2fc5b69+115177]\n\tGetHandleVerifier [0x0x7ff7d2fac368+10728]\n\t(No symbol) [0x0x7ffdcd95e8d7]\n\tRtlUserThreadStart [0x0x7ffdcda7c34c+44]\n\n", "trace": "  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\QAAppAllure.py\", line 153, in run_test\n    driver.execute_script(\"\"\"\n    ~~~~~~~~~~~~~~~~~~~~~^^^^\n        document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    \"\"\")\n    ^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 528, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1750750570785, "stop": 1750750573579}], "attachments": [{"name": "Cookie Acceptance Error", "source": "f7f5943c-6fdf-4e7f-ab3d-5379df12929a-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "e586b3f8-8c2c-461f-add4-67f3ff448f6a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_name': 'Last Configuration Completed', 'market_code': 'AT/de', 'model_code': 'C236', 'urls': {'MODEL_CODE': 'C236', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/coupe/cle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/CLE-KLASSE/COUPE', 'ONLINE_SHOP': '', 'TEST_DRIVE': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C236&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.at/?usecaselivetest=true', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLE'}, 'model_name': 'CLE', 'body_type': 'COUPE'}"}], "start": 1750750553417, "stop": 1750750577292, "uuid": "c5b7d483-fe59-4cd6-9cc8-b0aed24ccd53", "historyId": "baaad87fd23725714ab0a218f34dc934", "testCaseId": "30c1adb94d6468239eadaa98f3cf79c5", "fullName": "QAAppAllure#test_run", "labels": [{"name": "as_id", "value": "0ee838a117fd878fda7779b687ffd22f"}, {"name": "parentSuite", "value": "AT/de"}, {"name": "suite", "value": "Last Configuration Completed"}, {"name": "subSuite", "value": "C236 - CLE (COUPE)"}, {"name": "tag", "value": "Last Configuration Completed"}, {"name": "tag", "value": "AT/de"}, {"name": "tag", "value": "C236"}, {"name": "tag", "value": "COUPE"}, {"name": "tag", "value": "CLE"}, {"name": "defect", "value": "Cookie Acceptance Failure"}, {"name": "tag", "value": "Cookie Issue"}, {"name": "host", "value": "DE3SMDW0327562T"}, {"name": "thread", "value": "10600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "QAAppAllure"}]}