{"name": "test_run[test_case0]", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.", "trace": "test_case = {'body_type': 'COUPE', 'market_code': 'AT/de', 'model_code': 'C236', 'model_name': 'CLE', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\n\n            for case in fetched_cases:\n                # Append the test-specific query parameter to all URLs\n                if \"urls\" in case:\n                    for key, url in case[\"urls\"].items():\n                        if url and key == \"HOME_PAGE\":  # Ensure the URL is not None and the key is HOME_PAGE\n                            case[\"urls\"][key] = f\"{url}?usecaselivetest=true\"\n    \n            if model_code:\n                # Update the manual case with the fetched URLs for the specific model\n                manual_case[\"urls\"] = fetched_cases[0].get(\"urls\", {})\n                manual_case[\"model_name\"] = fetched_cases[0].get(\"model_name\", None)\n                manual_case[\"body_type\"] = fetched_cases[0].get(\"body_type\", None)\n            else:\n                # Add all fetched cases to dynamic_test_cases if no model_code is provided\n                dynamic_test_cases.extend(fetched_cases)\n        else:\n            logging.warning(f\"‚ö†Ô∏è No URLs found for manual case: {manual_case}\")\n    \n    # Combine manual and dynamic test cases\n    all_test_cases = manual_test_cases + dynamic_test_cases\n    \n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID √∫nico y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n>               allure.dynamic.tag(model_name)\n\nQAAppAllure.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nQAAppAllure.py:175: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bda8fe8ccefdbd79a107f8c210f37f81\")>\ntest_name = 'Last Configuration Completed', model_name = 'CLE'\nbody_type = 'COUPE', retries = 1\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x00000275D15E3610>\nurls = {'BODY_TYPE': 'COUPE', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.../AT/de/CLE-KLASSE/COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.at/?usecaselivetest=true', 'MODEL_CODE': 'C236', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"üîç Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"‚ÑπÔ∏è Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"‚úÖ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"‚ÑπÔ∏è Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"‚ùå Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"‚ùå Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n\nApp\\VerifyPersonalizationAndCapture.py:65: Failed"}, "description": "\nRuns a test for each test case, either manually defined or dynamically fetched.\n", "steps": [{"name": "üåê Fetched URLs for CLE (COUPE)", "status": "passed", "attachments": [{"name": "URLs for CLE (COUPE)", "source": "13a4268e-22b5-420d-857d-b865a7ad0999-attachment.json", "type": "application/json"}], "start": 1750752816067, "stop": 1750752816072}, {"name": "Setting up stealth mode for the browser", "status": "passed", "start": 1750752816073, "stop": 1750752816142}, {"name": "Enabling network logging", "status": "passed", "start": 1750752816142, "stop": 1750752816144}, {"name": "üåç Navigating to HOME_PAGE: https://www.mercedes-benz.at/?usecaselivetest=true", "status": "passed", "start": 1750752816144, "stop": 1750752822428}, {"name": "‚úÖ Detecting and accepting cookies", "status": "passed", "start": 1750752822428, "stop": 1750752825102}, {"name": "Perform Last Configuration Completed Logic", "status": "passed", "steps": [{"name": "üåç Navigated to: https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/CLE-KLASSE/COUPE", "status": "passed", "start": 1750752825102, "stop": 1750752832120}, {"name": "‚úÖ Performing configuration actions", "status": "passed", "start": 1750752832121, "stop": 1750752839217}, {"name": "üåç Navigated back to: https://www.mercedes-benz.at/?usecaselivetest=true", "status": "passed", "start": 1750752839218, "stop": 1750752847190}], "start": 1750752825102, "stop": 1750752847191}, {"name": "üîç Checking userGroup in XHR responses...", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n", "trace": "  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\App\\VerifyPersonalizationAndCapture.py\", line 65, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "Setting campaign name substring for test: Last Configuration Completed", "status": "passed", "attachments": [{"name": "Info", "source": "c20f3e52-15a0-4d48-b883-e691718c4881-attachment.txt", "type": "text/plain"}], "start": 1750752847191, "stop": 1750752847194}, {"name": "Capturing XHR responses", "status": "passed", "attachments": [{"name": "Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_austria_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZGVfQVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmF0Lz91c2VjYXNlbGl2ZXRlc3Q9dHJ1ZSIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNzQifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjE4NTQ4MDA2NDIuMTc1MDc1MjgyNiJ9LCJhbm9uSWQiOiJhZTE3MTIxYjcxZTllNmVmIn0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiMDA2ODAyOTQwNjc3NjcyNjIifQ%3D%3D", "source": "9aa84002-1eb5-4188-a744-e42ae6628672-attachment.json", "type": "application/json"}], "start": 1750752847194, "stop": 1750752847867}, {"name": "‚ùå Campaign 'last-configuration | private vans and all car models | home | simple-teaser and campaign-module' is in the Control Group. Retrying test.", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n", "trace": "  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\App\\VerifyPersonalizationAndCapture.py\", line 65, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "start": 1750752847883, "stop": 1750752847883}], "start": 1750752847191, "stop": 1750752847889}], "attachments": [{"name": "log", "source": "caff3c7a-2443-4a5d-8dd5-e59484fea6f1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_name': 'Last Configuration Completed', 'market_code': 'AT/de', 'model_code': 'C236', 'urls': {'MODEL_CODE': 'C236', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/coupe/cle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/CLE-KLASSE/COUPE', 'ONLINE_SHOP': '', 'TEST_DRIVE': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C236&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.at/?usecaselivetest=true', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLE'}, 'model_name': 'CLE', 'body_type': 'COUPE'}"}], "start": 1750752813240, "stop": 1750752850358, "uuid": "fe2c034a-0a64-4590-88e7-8067e9848676", "historyId": "baaad87fd23725714ab0a218f34dc934", "testCaseId": "30c1adb94d6468239eadaa98f3cf79c5", "fullName": "QAAppAllure#test_run", "labels": [{"name": "as_id", "value": "0ee838a117fd878fda7779b687ffd22f"}, {"name": "parentSuite", "value": "AT/de"}, {"name": "suite", "value": "Last Configuration Completed"}, {"name": "subSuite", "value": "C236 - CLE (COUPE)"}, {"name": "tag", "value": "Last Configuration Completed"}, {"name": "tag", "value": "AT/de"}, {"name": "tag", "value": "C236"}, {"name": "tag", "value": "COUPE"}, {"name": "tag", "value": "CLE"}, {"name": "host", "value": "DE3SMDW0327562T"}, {"name": "thread", "value": "12324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "QAAppAllure"}]}