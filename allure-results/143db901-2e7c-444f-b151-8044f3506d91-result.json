{"name": "test_run[test_case1]", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed due to image verification error.", "trace": "test_case = {'body_type': 'SALOON', 'market_code': 'BE/fr', 'model_code': 'C174', 'model_name': 'CLA-ELECTRIC', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID √∫nico y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            with allure.step(f\"üåê Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"‚ùå Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"‚ùå Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nQAAppAllure.py:175: in run_test\n    test_success = verify_personalization_and_capture(\nApp\\VerifyPersonalizationAndCapture.py:125: in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <App.ImageVerifier.ImageVerifier object at 0x00000238B03E7390>\nselector = \"[data-component-name='hp-campaigns'] img\"\nexpected_path = '/images/dynamic/europe/'\ntest_name = 'Last Configuration Completed', timeout = 6\n\n    def verify_image(self, selector: str, expected_path: str, test_name: str = None, timeout: int = 6) -> bool:\n        \"\"\"\n        Verifies if an image with the expected `src` is present among all images matching the selector.\n        \"\"\"\n        try:\n            # Wait for at least one image to be present\n            WebDriverWait(self.driver, timeout).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, selector))\n            )\n            images = self.driver.find_elements(By.CSS_SELECTOR, selector)\n            img_count = len(images)\n            logging.info(f\"Found {img_count} <img> elements inside {selector}.\")\n    \n            srcs = []\n            found_match = False\n            for i, img in enumerate(images):\n                src = img.get_attribute(\"src\")\n                srcs.append(src)\n                logging.info(f\"Image {i+1} src: {src}\")\n                if src and expected_path in src:\n                    found_match = True\n    \n            logging.info(\"All found image srcs:\\n\" + \"\\n\".join([str(s) for s in srcs]))\n            # Attach all found image srcs to Allure\n            allure.attach(\n                \"\\n\".join([str(s) for s in srcs]),\n                name=\"All Found Image Sources\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            if found_match:\n                # Find all matching srcs\n                matching_srcs = [src for src in srcs if src and expected_path in src]\n                # Attach all matching image srcs to Allure\n                allure.attach(\n                    \"\\n\".join([str(s) for s in matching_srcs]),\n                    name=\"Matching Image Sources\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                with allure.step(f\"‚úÖ Personalized image with expected src '{expected_path}' was applied correctly.\"):\n                    logging.info(f\"‚úÖ Personalized image with expected src '{expected_path}' was applied correctly.\")\n                    return True\n            else:\n                with allure.step(f\"‚ùå Image not found in the specified selector. Expected src: {expected_path}\"):\n                    logging.warning(f\"‚ùå Image not found in the specified selector. Expected src: {expected_path}\")\n                    message = f\"‚ùå Test '{test_name}' failed due to image verification error.\"\n>                   pytest.fail(message)\nE                   Failed: ‚ùå Test 'Last Configuration Completed' failed due to image verification error.\n\nApp\\ImageVerifier.py:58: Failed"}, "description": "\nRuns a test for each test case, either manually defined or dynamically fetched.\n", "steps": [{"name": "üåê Fetched URLs for CLA-ELECTRIC (SALOON)", "status": "passed", "attachments": [{"name": "URLs for CLA-ELECTRIC (SALOON)", "source": "311cbdb3-e888-4e85-83d8-1340c75c38d0-attachment.json", "type": "application/json"}], "start": 1750750752682, "stop": 1750750752687}, {"name": "Setting up stealth mode for the browser", "status": "passed", "start": 1750750752687, "stop": 1750750752947}, {"name": "Enabling network logging", "status": "passed", "start": 1750750752947, "stop": 1750750752953}, {"name": "üåç Navigating to HOME_PAGE: https://www.mercedes-benz.be/fr?usecaselivetest=true", "status": "passed", "start": 1750750752953, "stop": 1750750759800}, {"name": "‚úÖ Detecting and accepting cookies", "status": "passed", "start": 1750750759800, "stop": 1750750763141}, {"name": "Perform Last Configuration Completed Logic", "status": "passed", "steps": [{"name": "üåç Navigated to: https://www.mercedes-benz.be/fr/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/BE/fr/CLA/LIMOUSINE", "status": "passed", "start": 1750750763142, "stop": 1750750770353}, {"name": "‚úÖ Performing configuration actions", "status": "passed", "start": 1750750770353, "stop": 1750750776584}, {"name": "üåç Navigated back to: https://www.mercedes-benz.be/fr?usecaselivetest=true", "status": "passed", "start": 1750750776585, "stop": 1750750789397}], "start": 1750750763142, "stop": 1750750789397}, {"name": "üîç Checking userGroup in XHR responses...", "status": "passed", "steps": [{"name": "Setting campaign name substring for test: Last Configuration Completed", "status": "passed", "attachments": [{"name": "Info", "source": "495fdce5-7bff-47c7-a2ab-92a3fce19402-attachment.txt", "type": "text/plain"}], "start": 1750750789398, "stop": 1750750789402}, {"name": "Capturing XHR responses", "status": "passed", "attachments": [{"name": "Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_belgium_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZnJfRlIiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmJlL2ZyP3VzZWNhc2VsaXZldGVzdD10cnVlIiwidXJsUmVmZXJyZXIiOiIiLCJjaGFubmVsIjoiV2ViIiwiYmVhY29uVmVyc2lvbiI6MTYsImNvbmZpZ1ZlcnNpb24iOiIyNDUifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjE1NDc0NDMzNDQuMTc1MDc1MDc2NyJ9LCJhbm9uSWQiOiIyZTY5ZGIwMzFmMzY4MzY5In0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiMTk1MjkyNTQwNzkzMDg3NjcifQ%3D%3D", "source": "af913364-bfe7-47b2-9a3d-e2c188e22a32-attachment.json", "type": "application/json"}], "start": 1750750789402, "stop": 1750750804518}, {"name": "‚úÖ Campaign 'last-configuration | private vans and all car models | home | simple-teaser' has userGroup: Default and experienceName: fr.", "status": "passed", "start": 1750750804541, "stop": 1750750804541}], "start": 1750750789398, "stop": 1750750804541}, {"name": "üîç Verifying personalized image...", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed due to image verification error.\n", "trace": "  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\App\\VerifyPersonalizationAndCapture.py\", line 125, in verify_personalization_and_capture\n    test_success = image_verifier.verify_image(\n        selector=selector + \" img\",\n    ...<2 lines>...\n        timeout=6\n    )\n  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\App\\ImageVerifier.py\", line 58, in verify_image\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "üìú Scrolling to the element...", "status": "passed", "start": 1750750804541, "stop": 1750750804791}, {"name": "üìú Scrolling to specific elements and capturing screenshot", "status": "passed", "attachments": [{"name": "Scroll Info", "source": "a5a02fff-e441-4b5b-9880-e7befbb5678b-attachment.txt", "type": "text/plain"}], "start": 1750750804791, "stop": 1750750805986}, {"name": "‚úÖ Screenshot captured and saved", "status": "passed", "attachments": [{"name": "Final Screenshot", "source": "42433044-47f8-41af-9711-6b60d1212ffe-attachment.png", "type": "image/png"}], "start": 1750750806909, "stop": 1750750806918}, {"name": "‚ùå Image not found in the specified selector. Expected src: /images/dynamic/europe/", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed due to image verification error.\n", "trace": "  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\App\\ImageVerifier.py\", line 58, in verify_image\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "start": 1750750807048, "stop": 1750750807049}], "attachments": [{"name": "All Found Image Sources", "source": "52c33454-8ec1-4169-a223-7ca3d556b2ba-attachment.txt", "type": "text/plain"}], "start": 1750750804541, "stop": 1750750807050}], "attachments": [{"name": "log", "source": "18fec2f1-da50-4025-800e-33fc293a6ba3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_name': 'Last Configuration Completed', 'market_code': 'BE/fr', 'model_code': 'C174', 'urls': {'MODEL_CODE': 'C174', 'PRODUCT_PAGE': 'https://www.mercedes-benz.be/fr/passengercars/models/saloon/cla-electric/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.be/fr/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/BE/fr/CLA/LIMOUSINE', 'ONLINE_SHOP': '', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.be/fr?usecaselivetest=true', 'BODY_TYPE': 'SALOON', 'MODEL_NAME': 'CLA-ELECTRIC'}, 'model_name': 'CLA-ELECTRIC', 'body_type': 'SALOON'}"}], "start": 1750750744751, "stop": 1750750812754, "uuid": "3f2aa929-5df2-475b-872c-0cd1d2a0c77a", "historyId": "36fb7e858b3fd53211679f203720adba", "testCaseId": "30c1adb94d6468239eadaa98f3cf79c5", "fullName": "QAAppAllure#test_run", "labels": [{"name": "as_id", "value": "ee7980ea8b18ef50b8e8974bb45fe2a4"}, {"name": "parentSuite", "value": "BE/fr"}, {"name": "suite", "value": "Last Configuration Completed"}, {"name": "subSuite", "value": "C174 - CLA-ELECTRIC (SALOON)"}, {"name": "tag", "value": "Last Configuration Completed"}, {"name": "tag", "value": "BE/fr"}, {"name": "tag", "value": "C174"}, {"name": "tag", "value": "SALOON"}, {"name": "tag", "value": "CLA-ELECTRIC"}, {"name": "host", "value": "DE3SMDW0327562T"}, {"name": "thread", "value": "10600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "QAAppAllure"}]}