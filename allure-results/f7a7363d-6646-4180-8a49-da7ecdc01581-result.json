{"name": "test_run[test_case4]", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.", "trace": "test_case = {'body_type': 'SALOON', 'market_code': 'CH/fr', 'model_code': 'V297', 'model_name': 'EQS', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID √∫nico y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            with allure.step(f\"üåê Fetched URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\"):\n                allure.attach(\n                    json.dumps(urls, indent=2),\n                    name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"‚ùå Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"‚ùå Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nQAAppAllure.py:175: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"87114349fce0e3c8d03948b863223e11\")>\ntest_name = 'Last Configuration Completed', model_name = 'EQS'\nbody_type = 'SALOON', retries = 1\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure-Testing\\\\Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x000001470EC4CAD0>\nurls = {'BODY_TYPE': 'SALOON', 'CONFIGURATOR': 'https://www.mercedes-benz.ch/fr/passengercars/mercedes-benz-cars/car-configur...KLASSE/LIMOUSINE_LANG', 'HOME_PAGE': 'https://www.mercedes-benz.ch/fr?usecaselivetest=true', 'MODEL_CODE': 'V297', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"üîç Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"‚ÑπÔ∏è Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"‚úÖ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"‚ÑπÔ∏è Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"‚ùå Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"‚ùå Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n\nApp\\VerifyPersonalizationAndCapture.py:65: Failed"}, "description": "\nRuns a test for each test case, either manually defined or dynamically fetched.\n", "steps": [{"name": "üåê Fetched URLs for EQS (SALOON)", "status": "passed", "attachments": [{"name": "URLs for EQS (SALOON)", "source": "2fbceb62-edf2-4885-a090-0b8605a8b4eb-attachment.json", "type": "application/json"}], "start": 1750753177881, "stop": 1750753177886}, {"name": "Setting up stealth mode for the browser", "status": "passed", "start": 1750753177886, "stop": 1750753178150}, {"name": "Enabling network logging", "status": "passed", "start": 1750753178150, "stop": 1750753178171}, {"name": "üåç Navigating to HOME_PAGE: https://www.mercedes-benz.ch/fr?usecaselivetest=true", "status": "passed", "start": 1750753178172, "stop": 1750753184400}, {"name": "‚úÖ Detecting and accepting cookies", "status": "passed", "start": 1750753184400, "stop": 1750753187503}, {"name": "Perform Last Configuration Completed Logic", "status": "passed", "steps": [{"name": "üåç Navigated to: https://www.mercedes-benz.ch/fr/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/CH/fr/EQS-KLASSE/LIMOUSINE_LANG", "status": "passed", "start": 1750753187503, "stop": 1750753196036}, {"name": "‚úÖ Performing configuration actions", "status": "passed", "start": 1750753196037, "stop": 1750753204599}, {"name": "üåç Navigated back to: https://www.mercedes-benz.ch/fr?usecaselivetest=true", "status": "passed", "start": 1750753204599, "stop": 1750753215549}], "start": 1750753187503, "stop": 1750753215550}, {"name": "üîç Checking userGroup in XHR responses...", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n", "trace": "  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\App\\VerifyPersonalizationAndCapture.py\", line 65, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "Setting campaign name substring for test: Last Configuration Completed", "status": "passed", "attachments": [{"name": "Info", "source": "9cedf2aa-4ecb-4162-ab4b-4a645ca917b9-attachment.txt", "type": "text/plain"}], "start": 1750753215550, "stop": 1750753215556}, {"name": "Capturing XHR responses", "status": "passed", "attachments": [{"name": "Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_switzerland_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZnJfQ0giLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmNoL2ZyP3VzZWNhc2VsaXZldGVzdD10cnVlIiwidXJsUmVmZXJyZXIiOiIiLCJjaGFubmVsIjoiV2ViIiwiYmVhY29uVmVyc2lvbiI6MTYsImNvbmZpZ1ZlcnNpb24iOiI2MyJ9LCJmbGFncyI6eyJwYWdlVmlldyI6dHJ1ZX0sInVzZXIiOnsiYXR0cmlidXRlcyI6eyJnYUNsaWVudElEIjoiMTE2MDI3NTAxMy4xNzUwNzUzMTg4In0sImFub25JZCI6IjYzMDIxNjU3Yjg2M2MzZGQifSwicGVyZm9ybWFuY2UiOnt9LCJkZWJ1ZyI6eyJleHBsYW5hdGlvbnMiOnRydWV9LCJjYXRhbG9nIjp7fSwiY29uc2VudHMiOltdLCJhY2NvdW50Ijp7fSwiX3Rvb2xzRXZlbnRMaW5rSWQiOiI1Mjk3OTIzODAwMjQ0NTU5In0%3D", "source": "c55afa21-469f-4bf5-bc58-1cd042fa77ed-attachment.json", "type": "application/json"}], "start": 1750753215556, "stop": 1750753220553}, {"name": "‚ùå Campaign 'last-configuration | private vans and all car models | home | simple-teaser and campaign-module' is in the Control Group. Retrying test.", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n", "trace": "  File \"C:\\Python\\QA App Allure\\QA-App-Allure-Testing\\App\\VerifyPersonalizationAndCapture.py\", line 65, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "start": 1750753220575, "stop": 1750753220575}], "start": 1750753215550, "stop": 1750753220578}], "attachments": [{"name": "log", "source": "40dde30c-cd85-46a2-9c26-749b2a19d54a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_name': 'Last Configuration Completed', 'market_code': 'CH/fr', 'model_code': 'V297', 'urls': {'MODEL_CODE': 'V297', 'PRODUCT_PAGE': 'https://www.mercedes-benz.ch/fr/passengercars/models/saloon/eqs/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.ch/fr/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/CH/fr/EQS-KLASSE/LIMOUSINE_LANG', 'ONLINE_SHOP': '', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.ch/fr?usecaselivetest=true', 'BODY_TYPE': 'SALOON', 'MODEL_NAME': 'EQS'}, 'model_name': 'EQS', 'body_type': 'SALOON'}"}], "start": 1750753169376, "stop": 1750753230183, "uuid": "f10df700-3b81-4611-bca4-465bd6c5d2ed", "historyId": "02fe9a241300f3bef5881c6e4f992fb9", "testCaseId": "30c1adb94d6468239eadaa98f3cf79c5", "fullName": "QAAppAllure#test_run", "labels": [{"name": "as_id", "value": "70a4ed091072805f00bc6166910a1bfe"}, {"name": "parentSuite", "value": "CH/fr"}, {"name": "suite", "value": "Last Configuration Completed"}, {"name": "subSuite", "value": "V297 - EQS (SALOON)"}, {"name": "tag", "value": "Last Configuration Completed"}, {"name": "tag", "value": "CH/fr"}, {"name": "tag", "value": "V297"}, {"name": "tag", "value": "SALOON"}, {"name": "tag", "value": "EQS"}, {"name": "host", "value": "DE3SMDW0327562T"}, {"name": "thread", "value": "6744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "QAAppAllure"}]}